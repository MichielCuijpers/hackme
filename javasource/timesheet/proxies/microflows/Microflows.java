// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package timesheet.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the Timesheet module
	public static boolean afterStartUp(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("Timesheet.AfterStartUp").withParams(params).execute(context);
	}
	public static void approveAllTimesheetSubmissions(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("Timesheet.ApproveAllTimesheetSubmissions").withParams(params).execute(context);
	}
	public static void approveTimesheetSubmission(IContext context, timesheet.proxies.Submission _timeEntry)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TimeEntry", _timeEntry == null ? null : _timeEntry.getMendixObject());
		Core.microflowCall("Timesheet.ApproveTimesheetSubmission").withParams(params).execute(context);
	}
	public static void createANewSubmission(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("Timesheet.CreateANewSubmission").withParams(params).execute(context);
	}
	public static timesheet.proxies.Submission createRandomTask(IContext context, java.lang.String _description, java.lang.String _clientName, java.lang.String _requestorName)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("description", _description);
		params.put("clientName", _clientName);
		params.put("requestorName", _requestorName);
		IMendixObject result = (IMendixObject)Core.microflowCall("Timesheet.CreateRandomTask").withParams(params).execute(context);
		return result == null ? null : timesheet.proxies.Submission.initialize(context, result);
	}
	public static void declineTimesheetSubmission(IContext context, timesheet.proxies.Submission _timeEntry)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TimeEntry", _timeEntry == null ? null : _timeEntry.getMendixObject());
		Core.microflowCall("Timesheet.DeclineTimesheetSubmission").withParams(params).execute(context);
	}
	public static timesheet.proxies.MendixSSOUser dS_GetCurrentUser(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("Timesheet.DS_GetCurrentUser").withParams(params).execute(context);
		return result == null ? null : timesheet.proxies.MendixSSOUser.initialize(context, result);
	}
	public static timesheet.proxies.Submission newTimesheetSubmission(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("Timesheet.NewTimesheetSubmission").withParams(params).execute(context);
		return result == null ? null : timesheet.proxies.Submission.initialize(context, result);
	}
	public static void provisionDefaultUsers(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("Timesheet.ProvisionDefaultUsers").withParams(params).execute(context);
	}
	public static void provisionSampleTasks(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("Timesheet.ProvisionSampleTasks").withParams(params).execute(context);
	}
	public static timesheet.proxies.MendixSSOUser retrieveCurrentTeamMember(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("Timesheet.RetrieveCurrentTeamMember").withParams(params).execute(context);
		return result == null ? null : timesheet.proxies.MendixSSOUser.initialize(context, result);
	}
	public static void reviewTimesheetSubmission(IContext context, timesheet.proxies.Submission _timeEntry)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TimeEntry", _timeEntry == null ? null : _timeEntry.getMendixObject());
		Core.microflowCall("Timesheet.ReviewTimesheetSubmission").withParams(params).execute(context);
	}
	public static void setReviewedBy(IContext context, timesheet.proxies.Submission _submission)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Submission", _submission == null ? null : _submission.getMendixObject());
		Core.microflowCall("Timesheet.SetReviewedBy").withParams(params).execute(context);
	}
	public static void submitTimesheetSubmission(IContext context, timesheet.proxies.Submission _timeEntry)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TimeEntry", _timeEntry == null ? null : _timeEntry.getMendixObject());
		Core.microflowCall("Timesheet.SubmitTimesheetSubmission").withParams(params).execute(context);
	}
	public static void upsertAccount(IContext context, java.lang.String _name, java.lang.String _role)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("name", _name);
		params.put("role", _role);
		Core.microflowCall("Timesheet.UpsertAccount").withParams(params).execute(context);
	}
	public static void viewTimesheetSubmissionFromNotification(IContext context, notifications.proxies.Notification _notification)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Notification", _notification == null ? null : _notification.getMendixObject());
		Core.microflowCall("Timesheet.ViewTimesheetSubmissionFromNotification").withParams(params).execute(context);
	}
}
